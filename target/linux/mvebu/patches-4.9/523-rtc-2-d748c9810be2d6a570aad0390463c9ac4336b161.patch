commit d748c9810be2d6a570aad0390463c9ac4336b161
Author: Russell King <rmk+kernel@armlinux.org.uk>
Date:   Wed Jan 11 10:16:58 2017 +0000

    rtc: armada38x: make struct rtc_class_ops const

    Armada38x wants to modify its rtc_class_ops to remove the interrupt
    handling when there is no usable interrupt, but this means we leave
    function pointers in writable memory.

    Since rtc_class_ops is small, arrange to have two instances, one for
    when we have interrupts, and one for when we have none, both marked
    const.  This allows the compiler to place them in read-only memory,
    which is better than placing them in __ro_after_init.

    Thanks to Bhumika Goyal <bhumirks@gmail.com> for pointing out that
    the structure was writable and submitting a patch to add
    __ro_after_init.

    Signed-off-by: Russell King <rmk+kernel@armlinux.org.uk>
    Signed-off-by: Alexandre Belloni <alexandre.belloni@free-electrons.com>

diff --git a/drivers/rtc/rtc-armada38x.c b/drivers/rtc/rtc-armada38x.c
index bc82370..7cb5b27 100644
--- a/drivers/rtc/rtc-armada38x.c
+++ b/drivers/rtc/rtc-armada38x.c
@@ -262,7 +262,7 @@ static irqreturn_t armada38x_rtc_alarm_irq(int irq, void *data)
	return IRQ_HANDLED;
 }

-static struct rtc_class_ops armada38x_rtc_ops = {
+static const struct rtc_class_ops armada38x_rtc_ops = {
	.read_time = armada38x_rtc_read_time,
	.set_time = armada38x_rtc_set_time,
	.read_alarm = armada38x_rtc_read_alarm,
@@ -270,8 +270,15 @@ static irqreturn_t armada38x_rtc_alarm_irq(int irq, void *data)
	.alarm_irq_enable = armada38x_rtc_alarm_irq_enable,
 };

+static const struct rtc_class_ops armada38x_rtc_ops_noirq = {
+	.read_time = armada38x_rtc_read_time,
+	.set_time = armada38x_rtc_set_time,
+	.read_alarm = armada38x_rtc_read_alarm,
+};
+
 static __init int armada38x_rtc_probe(struct platform_device *pdev)
 {
+	const struct rtc_class_ops *ops;
	struct resource *res;
	struct armada38x_rtc *rtc;
	int ret;
@@ -307,22 +314,25 @@ static __init int armada38x_rtc_probe(struct platform_device *pdev)
				0, pdev->name, rtc) < 0) {
		dev_warn(&pdev->dev, "Interrupt not available.\n");
		rtc->irq = -1;
+	}
+	platform_set_drvdata(pdev, rtc);
+
+	if (rtc->irq != -1) {
+		device_init_wakeup(&pdev->dev, 1);
+		ops = &armada38x_rtc_ops;
+	} else {
		/*
		 * If there is no interrupt available then we can't
		 * use the alarm
		 */
-		armada38x_rtc_ops.set_alarm = NULL;
-		armada38x_rtc_ops.alarm_irq_enable = NULL;
+		ops = &armada38x_rtc_ops_noirq;
	}
-	platform_set_drvdata(pdev, rtc);
-	if (rtc->irq != -1)
-		device_init_wakeup(&pdev->dev, 1);

	/* Update RTC-MBUS bridge timing parameters */
	rtc_update_mbus_timing_params(rtc);

	rtc->rtc_dev = devm_rtc_device_register(&pdev->dev, pdev->name,
-					&armada38x_rtc_ops, THIS_MODULE);
+						ops, THIS_MODULE);
	if (IS_ERR(rtc->rtc_dev)) {
		ret = PTR_ERR(rtc->rtc_dev);
		dev_err(&pdev->dev, "Failed to register RTC device: %d\n", ret);
