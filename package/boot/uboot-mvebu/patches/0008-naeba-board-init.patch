diff -Nru u-boot-2017.03.orig/board/solidrun/naeba/kwbimage.cfg u-boot-2017.03/board/solidrun/naeba/kwbimage.cfg
--- u-boot-2017.03.orig/board/solidrun/naeba/kwbimage.cfg	1970-01-01 02:00:00.000000000 +0200
+++ u-boot-2017.03/board/solidrun/naeba/kwbimage.cfg	2017-03-13 19:54:16.000000000 +0200
@@ -0,0 +1,12 @@
+#
+# Copyright (C) 2017 Rabeeh Khoury <rabeeh@solid-run.com>
+#
+
+# Armada XP uses version 1 image format
+VERSION		1
+
+# Boot Media configurations
+BOOT_FROM	sdio
+
+# Binary Header (bin_hdr) with DDR3 training code
+BINARY spl/u-boot-spl-dtb.bin 0000005b 00000068
diff -Nru u-boot-2017.03.orig/board/solidrun/naeba/MAINTAINERS u-boot-2017.03/board/solidrun/naeba/MAINTAINERS
--- u-boot-2017.03.orig/board/solidrun/naeba/MAINTAINERS	1970-01-01 02:00:00.000000000 +0200
+++ u-boot-2017.03/board/solidrun/naeba/MAINTAINERS	2017-06-11 19:27:40.241639945 +0300
@@ -0,0 +1,6 @@
+NAEBA BOARD
+M:	Rabeeh Khoury <rabeeh@solid-run.com>
+S:	Maintained
+F:	board/solidrun/naeba/
+F:	include/configs/naeba.h
+F:	configs/naeba_defconfig
diff -Nru u-boot-2017.03.orig/board/solidrun/naeba/Makefile u-boot-2017.03/board/solidrun/naeba/Makefile
--- u-boot-2017.03.orig/board/solidrun/naeba/Makefile	1970-01-01 02:00:00.000000000 +0200
+++ u-boot-2017.03/board/solidrun/naeba/Makefile	2017-06-11 19:28:24.765641049 +0300
@@ -0,0 +1,7 @@
+#
+# Copyright (C) 2017 Rabeeh Khoury <rabeeh@solid-run.com>
+#
+# SPDX-License-Identifier:	GPL-2.0+
+#
+
+obj-y	:= naeba.o
diff -Nru u-boot-2017.03.orig/board/solidrun/naeba/naeba.c u-boot-2017.03/board/solidrun/naeba/naeba.c
--- u-boot-2017.03.orig/board/solidrun/naeba/naeba.c	1970-01-01 02:00:00.000000000 +0200
+++ u-boot-2017.03/board/solidrun/naeba/naeba.c	2017-06-11 19:24:03.345634570 +0300
@@ -0,0 +1,131 @@
+/*
+ * Copyright (C) 2017 Rabeeh Khoury <rabeeh@solid-run.com>
+ * Based on Clearfog work by Stefan Roese <sr@denx.de>
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+#include <common.h>
+#include <i2c.h>
+#include <miiphy.h>
+#include <netdev.h>
+#include <asm/io.h>
+#include <asm/arch/cpu.h>
+#include <asm/arch/soc.h>
+
+#include "../drivers/ddr/marvell/a38x/ddr3_a38x_topology.h"
+#include <../serdes/a38x/high_speed_env_spec.h>
+
+DECLARE_GLOBAL_DATA_PTR;
+
+#define BOARD_GPP_OUT_ENA_LOW	0xff37ffff
+#define BOARD_GPP_OUT_ENA_MID	0xfffebfdd
+
+#define BOARD_GPP_OUT_VAL_LOW	0x0
+#define BOARD_GPP_OUT_VAL_MID	0x0
+#define BOARD_GPP_POL_LOW	0x0
+#define BOARD_GPP_POL_MID	0x0
+
+static struct serdes_map board_serdes_map[] = {
+	{PEX0, SERDES_SPEED_5_GBPS, PEX_ROOT_COMPLEX_X1, 1, 0},
+	{SGMII1, SERDES_SPEED_3_125_GBPS, SERDES_DEFAULT_MODE, 0, 0},
+	{PEX1, SERDES_SPEED_5_GBPS, PEX_ROOT_COMPLEX_X1, 0, 0},
+	{USB3_HOST1, SERDES_SPEED_5_GBPS, SERDES_DEFAULT_MODE, 0, 0},
+	{PEX2, SERDES_SPEED_5_GBPS, PEX_ROOT_COMPLEX_X1, 0, 0},
+	{SGMII2, SERDES_SPEED_1_25_GBPS, SERDES_DEFAULT_MODE, 0, 0},
+};
+
+int hws_board_topology_load(struct serdes_map **serdes_map_array, u8 *count)
+{
+	*serdes_map_array = board_serdes_map;
+	*count = ARRAY_SIZE(board_serdes_map);
+	return 0;
+}
+
+/*
+ * Define the DDR layout / topology here in the board file. This will
+ * be used by the DDR3 init code in the SPL U-Boot version to configure
+ * the DDR3 controller.
+ */
+static struct hws_topology_map board_topology_map = {
+	0x1, /* active interfaces */
+	/* cs_mask, mirror, dqs_swap, ck_swap X PUPs */
+	{ { { {0x1, 0, 0, 0},
+	      {0x1, 0, 0, 0},
+	      {0x1, 0, 0, 0},
+	      {0x1, 0, 0, 0},
+	      {0x1, 0, 0, 0} },
+	    SPEED_BIN_DDR_1600K,	/* speed_bin */
+	    BUS_WIDTH_16,		/* memory_width */
+	    MEM_4G,			/* mem_size */
+	    DDR_FREQ_800,		/* frequency */
+	    0, 0,			/* cas_l cas_wl */
+	    HWS_TEMP_LOW} },		/* temperature */
+	5,				/* Num Of Bus Per Interface*/
+	BUS_MASK_32BIT			/* Busses mask */
+};
+
+struct hws_topology_map *ddr3_get_topology_map(void)
+{
+	/* Return the board topology as defined in the board code */
+	return &board_topology_map;
+}
+
+int board_early_init_f(void)
+{
+	/* Configure MPP */
+	writel(0x11111111, MVEBU_MPP_BASE + 0x00);
+	writel(0x11111111, MVEBU_MPP_BASE + 0x04);
+	writel(0x00400011, MVEBU_MPP_BASE + 0x08);
+	writel(0x00043300, MVEBU_MPP_BASE + 0x0c);
+	writel(0x44400002, MVEBU_MPP_BASE + 0x10);
+	writel(0x00004044, MVEBU_MPP_BASE + 0x14);
+	writel(0x40333333, MVEBU_MPP_BASE + 0x18);
+	writel(0x00004444, MVEBU_MPP_BASE + 0x1c);
+
+	/* Set GPP Out value */
+	writel(BOARD_GPP_OUT_VAL_LOW, MVEBU_GPIO0_BASE + 0x00);
+	writel(BOARD_GPP_OUT_VAL_MID, MVEBU_GPIO1_BASE + 0x00);
+
+	/* Set GPP Polarity */
+	writel(BOARD_GPP_POL_LOW, MVEBU_GPIO0_BASE + 0x0c);
+	writel(BOARD_GPP_POL_MID, MVEBU_GPIO1_BASE + 0x0c);
+
+	/* Set GPP Out Enable */
+	writel(BOARD_GPP_OUT_ENA_LOW, MVEBU_GPIO0_BASE + 0x04);
+	writel(BOARD_GPP_OUT_ENA_MID, MVEBU_GPIO1_BASE + 0x04);
+
+	/* Lower power supply voltage to 1.15 using AVS */
+	writel(0x10023235, MVEBU_REGISTER(0xe4130));
+
+	return 0;
+}
+
+int board_init(void)
+{
+	int i;
+
+	/* Address of boot parameters */
+	gd->bd->bi_boot_params = mvebu_sdram_bar(0) + 0x100;
+
+	/* De-assert pcie,switch,phy resets */
+	mdelay(100);
+	setbits_le32(MVEBU_GPIO1_BASE + 0x0, BIT(1) | BIT(3) | BIT(12));
+	setbits_le32(MVEBU_GPIO0_BASE + 0x0, BIT(19) | BIT(22) | BIT(23));
+	mdelay(10);
+
+	return 0;
+}
+
+int checkboard(void)
+{
+	puts("Board: SolidRun Naeba machine\n");
+
+	return 0;
+}
+
+int board_eth_init(bd_t *bis)
+{
+	cpu_eth_init(bis); /* Built in controller(s) come first */
+	return pci_eth_init(bis);
+}
